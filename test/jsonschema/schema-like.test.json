{
  "x-license": "https://github.com/sourcemeta/std/blob/main/LICENSE",
  "target": "../../schemas/jsonschema/schema-like.json",
  "tests": [
    {
      "description": "Invalid type - string",
      "data": "foo",
      "valid": false
    },
    {
      "description": "Invalid type - number",
      "data": 123,
      "valid": false
    },
    {
      "description": "Invalid type - null",
      "data": null,
      "valid": false
    },
    {
      "description": "Invalid type - array",
      "data": [],
      "valid": false
    },
    {
      "description": "Invalid type - non-empty array",
      "data": [ "type", "string" ],
      "valid": false
    },
    {
      "description": "Valid - boolean true",
      "data": true,
      "valid": true
    },
    {
      "description": "Valid - boolean false",
      "data": false,
      "valid": true
    },
    {
      "description": "Valid - empty object",
      "data": {},
      "valid": true
    },
    {
      "description": "Valid - simple type constraint",
      "data": {
        "type": "string"
      },
      "valid": true
    },
    {
      "description": "Valid - type with format",
      "data": {
        "type": "string",
        "format": "email"
      },
      "valid": true
    },
    {
      "description": "Valid - string with pattern",
      "data": {
        "type": "string",
        "pattern": "^[a-z]+$"
      },
      "valid": true
    },
    {
      "description": "Valid - number with minimum and maximum",
      "data": {
        "type": "number",
        "maximum": 100,
        "minimum": 0
      },
      "valid": true
    },
    {
      "description": "Valid - integer constraints",
      "data": {
        "type": "integer",
        "exclusiveMaximum": 1000,
        "exclusiveMinimum": 0,
        "multipleOf": 5
      },
      "valid": true
    },
    {
      "description": "Valid - array with items",
      "data": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "valid": true
    },
    {
      "description": "Valid - array with prefixItems",
      "data": {
        "type": "array",
        "prefixItems": [
          {
            "type": "string"
          },
          {
            "type": "number"
          }
        ]
      },
      "valid": true
    },
    {
      "description": "Valid - array with contains",
      "data": {
        "type": "array",
        "maxContains": 5,
        "minContains": 1,
        "contains": {
          "type": "string"
        }
      },
      "valid": true
    },
    {
      "description": "Valid - array with minItems and maxItems",
      "data": {
        "type": "array",
        "maxItems": 10,
        "minItems": 1,
        "uniqueItems": true
      },
      "valid": true
    },
    {
      "description": "Valid - object with properties",
      "data": {
        "type": "object",
        "properties": {
          "age": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "valid": true
    },
    {
      "description": "Valid - object with required",
      "data": {
        "type": "object",
        "required": [ "name" ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "valid": true
    },
    {
      "description": "Valid - object with additionalProperties",
      "data": {
        "type": "object",
        "additionalProperties": false
      },
      "valid": true
    },
    {
      "description": "Valid - object with patternProperties",
      "data": {
        "type": "object",
        "patternProperties": {
          "^I_": {
            "type": "integer"
          },
          "^S_": {
            "type": "string"
          }
        }
      },
      "valid": true
    },
    {
      "description": "Valid - object with propertyNames",
      "data": {
        "type": "object",
        "propertyNames": {
          "pattern": "^[a-z]+$"
        }
      },
      "valid": true
    },
    {
      "description": "Valid - object with minProperties and maxProperties",
      "data": {
        "type": "object",
        "maxProperties": 10,
        "minProperties": 1
      },
      "valid": true
    },
    {
      "description": "Valid - object with dependentRequired",
      "data": {
        "type": "object",
        "dependentRequired": {
          "credit_card": [ "billing_address" ]
        }
      },
      "valid": true
    },
    {
      "description": "Valid - object with dependentSchemas",
      "data": {
        "type": "object",
        "dependentSchemas": {
          "credit_card": {
            "required": [ "billing_address" ]
          }
        }
      },
      "valid": true
    },
    {
      "description": "Valid - enum constraint",
      "data": {
        "enum": [ "red", "green", "blue" ]
      },
      "valid": true
    },
    {
      "description": "Valid - const constraint",
      "data": {
        "const": "fixed-value"
      },
      "valid": true
    },
    {
      "description": "Valid - allOf composition",
      "data": {
        "allOf": [
          {
            "type": "string"
          },
          {
            "minLength": 5
          }
        ]
      },
      "valid": true
    },
    {
      "description": "Valid - anyOf composition",
      "data": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "number"
          }
        ]
      },
      "valid": true
    },
    {
      "description": "Valid - oneOf composition",
      "data": {
        "oneOf": [
          {
            "type": "string",
            "minLength": 5
          },
          {
            "type": "number",
            "minimum": 0
          }
        ]
      },
      "valid": true
    },
    {
      "description": "Valid - not composition",
      "data": {
        "not": {
          "type": "null"
        }
      },
      "valid": true
    },
    {
      "description": "Valid - if-then-else",
      "data": {
        "if": {
          "properties": {
            "country": {
              "const": "US"
            }
          }
        },
        "then": {
          "properties": {
            "postal_code": {
              "pattern": "[0-9]{5}"
            }
          }
        },
        "else": {
          "properties": {
            "postal_code": {
              "pattern": "[A-Z][0-9][A-Z] [0-9][A-Z][0-9]"
            }
          }
        }
      },
      "valid": true
    },
    {
      "description": "Valid - with $defs",
      "data": {
        "type": "object",
        "$defs": {
          "address": {
            "type": "object",
            "properties": {
              "city": {
                "type": "string"
              },
              "street": {
                "type": "string"
              }
            }
          }
        }
      },
      "valid": true
    },
    {
      "description": "Valid - with title and description",
      "data": {
        "title": "Person",
        "description": "A person object",
        "type": "object"
      },
      "valid": true
    },
    {
      "description": "Valid - with examples",
      "data": {
        "examples": [ "foo", "bar", "baz" ],
        "type": "string"
      },
      "valid": true
    },
    {
      "description": "Valid - with default",
      "data": {
        "default": "hello",
        "type": "string"
      },
      "valid": true
    },
    {
      "description": "Valid - with deprecated",
      "data": {
        "deprecated": true,
        "type": "string"
      },
      "valid": true
    },
    {
      "description": "Valid - with readOnly and writeOnly",
      "data": {
        "type": "object",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "integer"
          },
          "password": {
            "writeOnly": true,
            "type": "string"
          }
        }
      },
      "valid": true
    },
    {
      "description": "Valid - with $comment",
      "data": {
        "$comment": "This is a comment about the schema",
        "type": "string"
      },
      "valid": true
    },
    {
      "description": "Valid - multiple types",
      "data": {
        "type": [ "string", "number" ]
      },
      "valid": true
    },
    {
      "description": "Valid - contentMediaType and contentEncoding",
      "data": {
        "type": "string",
        "contentEncoding": "base64",
        "contentMediaType": "application/json"
      },
      "valid": true
    },
    {
      "description": "Valid - complex nested schema without meta keywords",
      "data": {
        "title": "Product",
        "description": "A product from the catalog",
        "type": "object",
        "required": [ "productId", "productName", "price" ],
        "properties": {
          "price": {
            "type": "number",
            "exclusiveMinimum": true,
            "minimum": 0
          },
          "productId": {
            "description": "The unique identifier for a product",
            "type": "integer"
          },
          "productName": {
            "description": "Name of the product",
            "type": "string"
          },
          "tags": {
            "type": "array",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "valid": true
    },
    {
      "description": "Valid - object with custom keywords",
      "data": {
        "x-another": 123,
        "x-custom": "value",
        "type": "string"
      },
      "valid": true
    },
    {
      "description": "Valid - unevaluatedProperties",
      "data": {
        "type": "object",
        "unevaluatedProperties": false
      },
      "valid": true
    },
    {
      "description": "Valid - unevaluatedItems",
      "data": {
        "type": "array",
        "unevaluatedItems": false
      },
      "valid": true
    },
    {
      "description": "Valid - with unknown/custom keywords",
      "data": {
        "type": "string",
        "anotherUnknown": 123,
        "customValidation": {
          "nested": "object"
        },
        "unknownKeyword": "value",
        "yetAnother": [ "array", "values" ]
      },
      "valid": true
    },
    {
      "description": "Valid - only unknown keywords",
      "data": {
        "anotherCustom": "bar",
        "customKeyword": "foo",
        "nonStandard": true
      },
      "valid": true
    }
  ]
}
